buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = "http://maven.minecraftforge.net" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'idea'

def versionObj = new Version(major: 1, minor: 10, revision: 4)

version = versionObj.toString()
group = "com.wynntils"
archivesBaseName = "Wynntils"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
compileJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: "stable", version: "39-1.12"

    runs {
        client {
            workingDirectory project.file('run')

            environment 'MC_VERSION', '1.12.2'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        if (project.hasProperty("minecraftEmailUsername") || project.hasProperty("minecraftPassword")) {
            eclipseUnsuppliedClient {
                parent runs.client

                args '--username=${string_prompt:Minecraft Email/Username}'
                args '--password=${password_prompt:Minecraft Password}'
            }

            intellijUnsuppliedClient {
                parent runs.client

                // If someone knows a prompt variable that actually hides the password when entering it for intellij then put it after "--password="
                args '--username=$Prompt$'
                args '--password=$Prompt$'
            }

            if (project.hasProperty('minecraftEmailUsername') && project.hasProperty('minecraftPassword')) {
                suppliedClient {
                    parent runs.client

                    args "--username=" + minecraftEmailUsername
                    args "--password=" + minecraftPassword
                }
            } else {
                eclipseSuppliedClient {
                    parent runs.client

                    if (project.hasProperty("minecraftEmailUsername")) {
                        args "--username=" + minecraftEmailUsername
                    } else {
                        args '--username=${string_prompt:Minecraft Email/Username}'
                    }

                    if (project.hasProperty("minecraftPassword")) {
                        args "--password=" + minecraftPassword
                    } else {
                        args '--password=${password_prompt:Minecraft Password}'
                    }
                }

                intellijSuppliedClient {
                    parent runs.client

                    if (project.hasProperty("minecraftEmailUsername")) {
                        args "--username=" + minecraftEmailUsername
                    } else {
                        args '--username=$Prompt$'
                    }

                    if (project.hasProperty("minecraftPassword")) {
                        args "--password=" + minecraftPassword
                    } else {
                        args '--password=$Prompt$'
                    }
                }
            }
        } else {
            eclipseClient {
                parent runs.client

                args '--username=${string_prompt:Minecraft Email/Username}'
                args '--password=${password_prompt:Minecraft Password}'
            }

            intellijClient {
                parent runs.client

                // If someone knows a prompt variable that actually hides the password when entering it for intellij then put it after "--password="
                args '--username=$Prompt$'
                args '--password=$Prompt$'
            }
        }
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

/*
 *  * Copyright Â© Wynntils - 2021.
 */

// Allow for local override with different Forge
if (!project.hasProperty("wynntilsForgeVersion")) {
    ext.wynntilsForgeVersion='1.12.2-14.23.5.2854'
}

dependencies {
    minecraft "net.minecraftforge:forge:${wynntilsForgeVersion}"
    compile "javazoom:jlayer:1.0.1"
}

processResources {
    inputs.property "description", "The best Wynncraft mod you'll probably find!\nBuild " + versionObj.getBuild()
    inputs.property "version", versionObj.toVersion()

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'description':"The best Wynncraft mod you'll probably find!\nBuild " + versionObj.getBuild(), 'version':versionObj.toVersion()
    }
}

jar {
    manifest {
        attributes [:]
    }
}



// We need to reobfuscate the Shadow Jar
reobf {
    shadowJar {}
}

shadowJar {
    dependencies {
        include(dependency('javazoom:jlayer:.*'))
    }

    baseName = archivesBaseName + "-" + version
    classifier = null
    version = null
    configurations = [project.configurations.compile]
}



class Version {
    int major, minor, revision

    static String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toVersion() {
        "${major}.${minor}.${revision}"
    }

    String toString() {
        "${major}.${minor}.${revision}_$build-MC1.12.2"
    }
}
